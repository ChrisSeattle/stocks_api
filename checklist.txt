# Specs & Feature Checklist #

## Code 08 ##
- [x] Create your Pyramid scaffold using the cookiecutter template for a SQLAlchemy scaffold
- [x] Navigate into the new project directory and create a new git repository: git init
- [x] Create a new repository on GitHub called stocks_api, and connect your repos using git remote add - [ ] origin <url-to-your-repo.git> from within the project directory
- [x] Create a well named branch for today’s work in your stocks_api repository
- [x] Configure the root of your repository with the following files and directories.
- [x] Thoughtfully name and organize any additional configuration or module files
- [x] README.md - Containing good documentation for how to setup, install, and run your application
- [x] Copy all of standard config files into the root (.editorconfig and .gitignore)
- [x] stocks_api/stocks_api/tests/ - Contains unit tests for your application
- [x] Create a virtual environment with pipenv
- [x] run pipenv install -e ".[testing]" to install the dependencies from the scaffold’s setup.py

Features
- [x] Disable the unnecessary functionality: commenting out the include() in __init__.py:main()
- [x] We will not be using Jinja2 templating (Delete that line) or Models for the time being
- [x] Delete the templates/ directory
- [x] Remove the contents of default.py and notfound.py
- [x] In class we were instructed to only worry about GET on home and /api/v1/stocks/.
- [x] Create a checklist for Pull Request submission
- [x] Update Readme



## Code 11 **

- [x] Create an appropriate branch, checking if a specific name was assigned, or using a logical name based on features and lab.
- [x] In your models/ directory, create a file called portfolio.py.
- [x] You will create a Portfolio class with the following attributes:
        id, name, date_created, date_updated
- [x] Define each attribute of your class with the appropriate data type and any further restrictions or definitions that each attribute should carry with it into the database table.
- [x] Define two class methods on your Portfolio class:
- [x] one(): Retrieve a single instance from the database by the primary key for that record
- [x] new(): Create a single new instance of the Portfolio class
- [x] In your models/ directory, create a file called stock.py.
- [x] You will create a Stock class with the following attributes, which are being defined to mirror the data that you will retrieve from your 3rd party API:
        id, symbol, companyName, exchange, industry, website, description, CEO, issueType, sector, date_created, date_updated
- [x] Define each attribute of your class with the appropriate data type and any further restrictions or definitions that each attribute should carry with it into the database table.
- [x] Define all following three class methods on your Stock class:
- [x] one(): Retrieve a single instance from the database by the primary key for that record
- [x] new(): Create a single new instance of the Stock class
- [x] destroy(): Remove a single instance from the database by the primary key for that record
- [x] In your models/ directory, create a file called schemas.py for your model serializers.
- [x] You will define two Marshmallow schemas in this file, one for PortfolioSchema and one for StockSchema.
- [x] Each of these will simply define the model they require for serialization (we’ll further define these later in the course…)
- [ ] In your views/portfolio.py file, you will further define the following View Class Controllers:
- [ ] PortfolioAPIView - Controller interactions with your Portfolio model/schema
- [ ] StockAPIView - Controller interactions with your Stock model/schema
- [ ] CompanyAPIView - 3rd-party API interactions for requesting company data for your portfolio
- [ ] You will be using the requests library and a free API from IEX TRADING, which does not require the use of an API key at this point.
- [ ] We are specifically interested in the Company Info and the Time Series info, both of which are accessible via an API call using a companies Stock Symbol.
- [ ] Using your model class methods, formulate an appropriate serialized response for each available endpoint / method that we configured in our last lab for this application. You may want to refer back to the LAB.md specification for each of those endpoints to review the functionality required.
- [ ] Redeploy your application, and verify that you are able to make requests to your site from an HTTP client like Postman or HTTPie.
- [x] Testing section was removed from our specs
        Using the testapp fixture that we setup with our last assignment continue building your test suite.
        You are required to meet or exceed an 80% coverage benchmark for this application.
        As of today, your endpoints will return actual JSON encoded response data as a representation of your records. Ensure that you’ve thoroughly covered your endpoints, including successful and erroneous requests and responses.
- [x] Create a checklist for Pull Request submission
- [x] Update Readme


